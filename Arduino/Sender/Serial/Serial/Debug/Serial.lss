
Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800200  00000dcc  00000e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800250  00800250  00000eb0  2**0
                  ALLOC
  3 .stab         0000096c  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001970  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001372  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006af  00000000  00000000  00002e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ade  00000000  00000000  00003531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000704  00000000  00000000  00004010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  00004714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011bc  00000000  00000000  00004bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005d92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 03 04 	jmp	0x806	; 0x806 <__vector_1>
   8:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_2>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 8b 04 	jmp	0x916	; 0x916 <__vector_15>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_23>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_25>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_35>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ec       	ldi	r30, 0xCC	; 204
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 35       	cpi	r26, 0x50	; 80
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e5       	ldi	r26, 0x50	; 80
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a7 39       	cpi	r26, 0x97	; 151
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 c8 03 	call	0x790	; 0x790 <main>
 124:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <checkStatus>:
 *  Author: Valdemar
 */ 
#include <avr/io.h>
#include "DE2.h"
char checkStatus(){
	if((PIND & 1<<1))
 12c:	49 9b       	sbis	0x09, 1	; 9
 12e:	02 c0       	rjmp	.+4      	; 0x134 <checkStatus+0x8>
	return 'L';
 130:	8c e4       	ldi	r24, 0x4C	; 76
 132:	08 95       	ret
	else
	return 'O';
 134:	8f e4       	ldi	r24, 0x4F	; 79
}
 136:	08 95       	ret

00000138 <initINT1>:

void initINT1(){
	DDRD &= 0b11111101;
 138:	51 98       	cbi	0x0a, 1	; 10
	EIMSK |= 0b00000010;
 13a:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= 0b00000100; // any edge triggered
 13c:	e9 e6       	ldi	r30, 0x69	; 105
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
}
 146:	08 95       	ret

00000148 <getStatus>:
char getStatus(){
	return status;
 148:	80 91 50 02 	lds	r24, 0x0250
}
 14c:	08 95       	ret

0000014e <setStatus>:
void setStatus(char s){
	status = s;
 14e:	80 93 50 02 	sts	0x0250, r24
 152:	08 95       	ret

00000154 <initLEDport>:
#define MAX_LED_NR 7
#include "led.h"
void initLEDport()
{
  // Sæt alle PORTB's ben til at være udgange
  DDRB = 0xFF;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	84 b9       	out	0x04, r24	; 4
  // Sluk alle lysdioderne
  PORTB = 0;
 158:	15 b8       	out	0x05, r1	; 5
}
 15a:	08 95       	ret

0000015c <writeAllLEDs>:

void writeAllLEDs(unsigned char pattern)
{
  // Hent parameteren og skriv til lysdioderne
  PORTB |= pattern;   
 15c:	95 b1       	in	r25, 0x05	; 5
 15e:	89 2b       	or	r24, r25
 160:	85 b9       	out	0x05, r24	; 5
}
 162:	08 95       	ret

00000164 <turnOnLED>:
void turnOnLED(unsigned char led_nr)
{
// Lokal variabel
unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	60 f4       	brcc	.+24     	; 0x180 <turnOnLED+0x1c>
  {
    // Dan maske på basis af parameteren (led_nr)
    mask = 0b00000001 << led_nr;
    // Tænd den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB | mask;
 168:	43 b1       	in	r20, 0x03	; 3
unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
  {
    // Dan maske på basis af parameteren (led_nr)
    mask = 0b00000001 << led_nr;
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <turnOnLED+0x12>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <turnOnLED+0xe>
 17a:	cb 01       	movw	r24, r22
    // Tænd den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB | mask;
 17c:	84 2b       	or	r24, r20
 17e:	85 b9       	out	0x05, r24	; 5
 180:	08 95       	ret

00000182 <turnOffLED>:
void turnOffLED(unsigned char led_nr)
{
  // Lokal variabel
  unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	68 f4       	brcc	.+26     	; 0x1a0 <turnOffLED+0x1e>
  {
	// Dan (inverteret) maske på basis af parameteren (led_nr)
    mask = ~(0b00000001 << led_nr);
    // Sluk den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB & mask;
 186:	43 b1       	in	r20, 0x03	; 3
  unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
  {
	// Dan (inverteret) maske på basis af parameteren (led_nr)
    mask = ~(0b00000001 << led_nr);
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	b9 01       	movw	r22, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <turnOffLED+0x12>
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	8a 95       	dec	r24
 196:	e2 f7       	brpl	.-8      	; 0x190 <turnOffLED+0xe>
 198:	cb 01       	movw	r24, r22
 19a:	80 95       	com	r24
    // Sluk den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB & mask;
 19c:	84 23       	and	r24, r20
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	08 95       	ret

000001a2 <toggleLED>:
void toggleLED(unsigned char led_nr)
{
  // Lokal variabel
  unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	60 f4       	brcc	.+24     	; 0x1be <toggleLED+0x1c>
  {
    // Dan maske på basis af parameteren (led_nr)
    mask = 0b00000001 << led_nr;
    // Toggle den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB ^ mask;
 1a6:	43 b1       	in	r20, 0x03	; 3
  unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
  {
    // Dan maske på basis af parameteren (led_nr)
    mask = 0b00000001 << led_nr;
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <toggleLED+0x12>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <toggleLED+0xe>
 1b8:	cb 01       	movw	r24, r22
    // Toggle den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB ^ mask;
 1ba:	84 27       	eor	r24, r20
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <setup>:
	setMessage(0);
	setReadIndex(0);
	setSend(0);
}
void setup(){
	sei();
 1c0:	78 94       	sei
	initINT1();
 1c2:	0e 94 9c 00 	call	0x138	; 0x138 <initINT1>
	setStatus(checkStatus());
 1c6:	0e 94 96 00 	call	0x12c	; 0x12c <checkStatus>
 1ca:	0e 94 a7 00 	call	0x14e	; 0x14e <setStatus>
}
 1ce:	08 95       	ret

000001d0 <setWait>:
void setWait(int w){
	wait= w;
 1d0:	90 93 5a 02 	sts	0x025A, r25
 1d4:	80 93 59 02 	sts	0x0259, r24
}
 1d8:	08 95       	ret

000001da <getWait>:
int getWait(){
	return wait;
 1da:	80 91 59 02 	lds	r24, 0x0259
 1de:	90 91 5a 02 	lds	r25, 0x025A
}
 1e2:	08 95       	ret

000001e4 <getMode>:
void setMode(int m){
	mode = m;
	setIndex(0);
}
int getMode(){
	return mode;
 1e4:	80 91 55 02 	lds	r24, 0x0255
 1e8:	90 91 56 02 	lds	r25, 0x0256
}
 1ec:	08 95       	ret

000001ee <setSend>:
void setSend(int s){
	send = s;
 1ee:	90 93 54 02 	sts	0x0254, r25
 1f2:	80 93 53 02 	sts	0x0253, r24
}
 1f6:	08 95       	ret

000001f8 <getSend>:
int getSend(){
	return send;
 1f8:	80 91 53 02 	lds	r24, 0x0253
 1fc:	90 91 54 02 	lds	r25, 0x0254
}
 200:	08 95       	ret

00000202 <setExit>:
void setExit(int e){
	exit1 = e;
 202:	90 93 58 02 	sts	0x0258, r25
 206:	80 93 57 02 	sts	0x0257, r24
}
 20a:	08 95       	ret

0000020c <getExit>:
int getExit(){
	return exit1;
 20c:	80 91 57 02 	lds	r24, 0x0257
 210:	90 91 58 02 	lds	r25, 0x0258
}
 214:	08 95       	ret

00000216 <setCycle>:
void setCycle(int c){
	cycle = c;
 216:	90 93 52 02 	sts	0x0252, r25
 21a:	80 93 51 02 	sts	0x0251, r24
}
 21e:	08 95       	ret

00000220 <getCycle>:
int getCycle(){
	return cycle;
 220:	80 91 51 02 	lds	r24, 0x0251
 224:	90 91 52 02 	lds	r25, 0x0252
}
 228:	08 95       	ret

0000022a <incCycle>:
void incCycle(){
	cycle++;
 22a:	80 91 51 02 	lds	r24, 0x0251
 22e:	90 91 52 02 	lds	r25, 0x0252
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 52 02 	sts	0x0252, r25
 238:	80 93 51 02 	sts	0x0251, r24
}
 23c:	08 95       	ret

0000023e <getIndex>:
int getIndex(){
	return index;
 23e:	80 91 5b 02 	lds	r24, 0x025B
 242:	90 91 5c 02 	lds	r25, 0x025C
}
 246:	08 95       	ret

00000248 <setIndex>:
void setIndex(int i){
	index = i;
 248:	90 93 5c 02 	sts	0x025C, r25
 24c:	80 93 5b 02 	sts	0x025B, r24
}
 250:	08 95       	ret

00000252 <setMode>:
}
int getWait(){
	return wait;
}
void setMode(int m){
	mode = m;
 252:	90 93 56 02 	sts	0x0256, r25
 256:	80 93 55 02 	sts	0x0255, r24
	setIndex(0);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 24 01 	call	0x248	; 0x248 <setIndex>
}
 262:	08 95       	ret

00000264 <reset>:
volatile int cycle;
volatile int send;
volatile int exit1;
volatile int wait;
void reset(){
	setMode(0);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 29 01 	call	0x252	; 0x252 <setMode>
	setCycle(0);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 0b 01 	call	0x216	; 0x216 <setCycle>
	setExit(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 01 01 	call	0x202	; 0x202 <setExit>
	setMessage(0);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 17 06 	call	0xc2e	; 0xc2e <setMessage>
	setReadIndex(0);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 12 06 	call	0xc24	; 0xc24 <setReadIndex>
	setSend(0);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 f7 00 	call	0x1ee	; 0x1ee <setSend>
}
 294:	08 95       	ret

00000296 <endTransmission>:
		}
	}
}

void endTransmission(){
	disableINT0();// disable INT0
 296:	0e 94 47 06 	call	0xc8e	; 0xc8e <disableINT0>
	stopTimer0();
 29a:	0e 94 2c 05 	call	0xa58	; 0xa58 <stopTimer0>
	//stopTimer3();
}	
 29e:	08 95       	ret

000002a0 <sendx10>:

int sendx10(int * x10address, int* x10command){
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
 2aa:	8b 01       	movw	r16, r22
	if(getMode() == 1) // sender startkode
 2ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <getMode>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	91 05       	cpc	r25, r1
 2b4:	c1 f5       	brne	.+112    	; 0x326 <sendx10+0x86>
	{
		switch(index){
 2b6:	80 91 5b 02 	lds	r24, 0x025B
 2ba:	90 91 5c 02 	lds	r25, 0x025C
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	91 05       	cpc	r25, r1
 2c2:	c1 f0       	breq	.+48     	; 0x2f4 <sendx10+0x54>
 2c4:	82 30       	cpi	r24, 0x02	; 2
 2c6:	91 05       	cpc	r25, r1
 2c8:	1c f4       	brge	.+6      	; 0x2d0 <sendx10+0x30>
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	49 f0       	breq	.+18     	; 0x2e0 <sendx10+0x40>
 2ce:	94 c0       	rjmp	.+296    	; 0x3f8 <sendx10+0x158>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	91 05       	cpc	r25, r1
 2d4:	c9 f0       	breq	.+50     	; 0x308 <sendx10+0x68>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	91 05       	cpc	r25, r1
 2da:	09 f0       	breq	.+2      	; 0x2de <sendx10+0x3e>
 2dc:	8d c0       	rjmp	.+282    	; 0x3f8 <sendx10+0x158>
 2de:	1e c0       	rjmp	.+60     	; 0x31c <sendx10+0x7c>
			case 0:
			sendPWM(); // der sendes et 1 tal
 2e0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sendPWM>
			setIndex(index +1);
 2e4:	80 91 5b 02 	lds	r24, 0x025B
 2e8:	90 91 5c 02 	lds	r25, 0x025C
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 24 01 	call	0x248	; 0x248 <setIndex>
			break;
 2f2:	82 c0       	rjmp	.+260    	; 0x3f8 <sendx10+0x158>
			case 1:
			sendPWM();
 2f4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sendPWM>
			setIndex(index +1);
 2f8:	80 91 5b 02 	lds	r24, 0x025B
 2fc:	90 91 5c 02 	lds	r25, 0x025C
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	0e 94 24 01 	call	0x248	; 0x248 <setIndex>
			break;
 306:	78 c0       	rjmp	.+240    	; 0x3f8 <sendx10+0x158>
			case 2:
			sendPWM();
 308:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sendPWM>
			setIndex(index +1);
 30c:	80 91 5b 02 	lds	r24, 0x025B
 310:	90 91 5c 02 	lds	r25, 0x025C
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	0e 94 24 01 	call	0x248	; 0x248 <setIndex>
			break;
 31a:	6e c0       	rjmp	.+220    	; 0x3f8 <sendx10+0x158>
			case 3:
			setMode(2);
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 29 01 	call	0x252	; 0x252 <setMode>
			break;
 324:	69 c0       	rjmp	.+210    	; 0x3f8 <sendx10+0x158>
		}
	}
	else if(getMode() == 2 || getMode() == 3){
 326:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <getMode>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	91 05       	cpc	r25, r1
 32e:	31 f0       	breq	.+12     	; 0x33c <sendx10+0x9c>
 330:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <getMode>
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	91 05       	cpc	r25, r1
 338:	09 f0       	breq	.+2      	; 0x33c <sendx10+0x9c>
 33a:	5e c0       	rjmp	.+188    	; 0x3f8 <sendx10+0x158>
			disableINT0();
 33c:	0e 94 47 06 	call	0xc8e	; 0xc8e <disableINT0>
			initTimer0();
 340:	0e 94 21 05 	call	0xa42	; 0xa42 <initTimer0>
		if(getMode() == 2) // sender addresse kode
 344:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <getMode>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	91 05       	cpc	r25, r1
 34c:	41 f5       	brne	.+80     	; 0x39e <sendx10+0xfe>
		{
			if(x10address[index] == 1){
 34e:	80 91 5b 02 	lds	r24, 0x025B
 352:	90 91 5c 02 	lds	r25, 0x025C
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	c8 0f       	add	r28, r24
 35c:	d9 1f       	adc	r29, r25
 35e:	88 81       	ld	r24, Y
 360:	99 81       	ldd	r25, Y+1	; 0x01
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	91 05       	cpc	r25, r1
 366:	51 f4       	brne	.+20     	; 0x37c <sendx10+0xdc>
				sendPWM();
 368:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sendPWM>
				setIndex(index +1);
 36c:	80 91 5b 02 	lds	r24, 0x025B
 370:	90 91 5c 02 	lds	r25, 0x025C
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0e 94 24 01 	call	0x248	; 0x248 <setIndex>
 37a:	07 c0       	rjmp	.+14     	; 0x38a <sendx10+0xea>
			}
			else {
				setIndex(index +1);
 37c:	80 91 5b 02 	lds	r24, 0x025B
 380:	90 91 5c 02 	lds	r25, 0x025C
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	0e 94 24 01 	call	0x248	; 0x248 <setIndex>
			}
			if(getIndex() == 8){
 38a:	0e 94 1f 01 	call	0x23e	; 0x23e <getIndex>
 38e:	88 30       	cpi	r24, 0x08	; 8
 390:	91 05       	cpc	r25, r1
 392:	91 f5       	brne	.+100    	; 0x3f8 <sendx10+0x158>
				setMode(3);
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 29 01 	call	0x252	; 0x252 <setMode>
 39c:	2d c0       	rjmp	.+90     	; 0x3f8 <sendx10+0x158>
			}

		}
		else if(getMode() == 3){
 39e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <getMode>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	91 05       	cpc	r25, r1
 3a6:	41 f5       	brne	.+80     	; 0x3f8 <sendx10+0x158>
			if(x10command[index] == 1){
 3a8:	80 91 5b 02 	lds	r24, 0x025B
 3ac:	90 91 5c 02 	lds	r25, 0x025C
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	08 0f       	add	r16, r24
 3b6:	19 1f       	adc	r17, r25
 3b8:	f8 01       	movw	r30, r16
 3ba:	80 81       	ld	r24, Z
 3bc:	91 81       	ldd	r25, Z+1	; 0x01
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	91 05       	cpc	r25, r1
 3c2:	51 f4       	brne	.+20     	; 0x3d8 <sendx10+0x138>
				sendPWM();
 3c4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sendPWM>
				setIndex(index +1);
 3c8:	80 91 5b 02 	lds	r24, 0x025B
 3cc:	90 91 5c 02 	lds	r25, 0x025C
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	0e 94 24 01 	call	0x248	; 0x248 <setIndex>
 3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <sendx10+0x146>
			}
			else{
				setIndex(index +1);
 3d8:	80 91 5b 02 	lds	r24, 0x025B
 3dc:	90 91 5c 02 	lds	r25, 0x025C
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	0e 94 24 01 	call	0x248	; 0x248 <setIndex>
			}
			if(getIndex() == 8){
 3e6:	0e 94 1f 01 	call	0x23e	; 0x23e <getIndex>
 3ea:	88 30       	cpi	r24, 0x08	; 8
 3ec:	91 05       	cpc	r25, r1
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <sendx10+0x158>
				setMode(0);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 29 01 	call	0x252	; 0x252 <setMode>
			}
		}
		
		}
	if(getMode() == 0){
 3f8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <getMode>
 3fc:	00 97       	sbiw	r24, 0x00	; 0
 3fe:	91 f4       	brne	.+36     	; 0x424 <sendx10+0x184>
		setSend(0);
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 f7 00 	call	0x1ee	; 0x1ee <setSend>
		stopTimer0();
 408:	0e 94 2c 05 	call	0xa58	; 0xa58 <stopTimer0>
		incCycle();
 40c:	0e 94 15 01 	call	0x22a	; 0x22a <incCycle>
		setWait(1);
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setWait>
		setMode(1);
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 29 01 	call	0x252	; 0x252 <setMode>
		initINT0();
 420:	0e 94 3f 06 	call	0xc7e	; 0xc7e <initINT0>
	}
	return 1;
}
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	08 95       	ret

00000432 <startTransmission>:
	return index;
}
void setIndex(int i){
	index = i;
}
void startTransmission(int* x10add,int * x10com){
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
 43c:	8b 01       	movw	r16, r22
	//setWait(1);
	initINT0();
 43e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <initINT0>
	setCounterTimer(0);
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 73 06 	call	0xce6	; 0xce6 <setCounterTimer>
	// initiering af x.10 sender sekvens
	DDRB |= 0b00100000; // PB5 sættes som udgang
 44a:	25 9a       	sbi	0x04, 5	; 4
	setMode(1);
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 29 01 	call	0x252	; 0x252 <setMode>
	while(getExit() == 0){
 454:	20 c0       	rjmp	.+64     	; 0x496 <startTransmission+0x64>
		if(getCycle() < 3){
 456:	0e 94 10 01 	call	0x220	; 0x220 <getCycle>
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	91 05       	cpc	r25, r1
 45e:	84 f4       	brge	.+32     	; 0x480 <startTransmission+0x4e>
			if(getSend() == 1){
 460:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSend>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	91 05       	cpc	r25, r1
 468:	b1 f4       	brne	.+44     	; 0x496 <startTransmission+0x64>
			while(sendx10(x10add,x10com) == 0){}
 46a:	ce 01       	movw	r24, r28
 46c:	b8 01       	movw	r22, r16
 46e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <sendx10>
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	d1 f3       	breq	.-12     	; 0x46a <startTransmission+0x38>
			setSend(0);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <setSend>
 47e:	0b c0       	rjmp	.+22     	; 0x496 <startTransmission+0x64>
		}
	}
		else if(getCycle() >= 3){
 480:	0e 94 10 01 	call	0x220	; 0x220 <getCycle>
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	91 05       	cpc	r25, r1
 488:	34 f0       	brlt	.+12     	; 0x496 <startTransmission+0x64>
			endTransmission();
 48a:	0e 94 4b 01 	call	0x296	; 0x296 <endTransmission>
			setExit(1);
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 01 01 	call	0x202	; 0x202 <setExit>
	initINT0();
	setCounterTimer(0);
	// initiering af x.10 sender sekvens
	DDRB |= 0b00100000; // PB5 sættes som udgang
	setMode(1);
	while(getExit() == 0){
 496:	0e 94 06 01 	call	0x20c	; 0x20c <getExit>
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	e1 f2       	breq	.-72     	; 0x456 <startTransmission+0x24>
		else if(getCycle() >= 3){
			endTransmission();
			setExit(1);
		}
	}
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret

000004a8 <encodeBIN>:
		encodeBIN("1111", destination, length);
	}
}

void encodeBIN(const char * convert, int * dest, int length) {
	for (int i = 0; i< length; i++) {
 4a8:	14 16       	cp	r1, r20
 4aa:	15 06       	cpc	r1, r21
 4ac:	ac f4       	brge	.+42     	; 0x4d8 <encodeBIN+0x30>
 4ae:	a8 2f       	mov	r26, r24
 4b0:	b9 2f       	mov	r27, r25
 4b2:	e6 2f       	mov	r30, r22
 4b4:	f7 2f       	mov	r31, r23
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
		if (convert[i] == '1')
		dest[i] = 1;
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
	}
}

void encodeBIN(const char * convert, int * dest, int length) {
	for (int i = 0; i< length; i++) {
		if (convert[i] == '1')
 4be:	6d 91       	ld	r22, X+
 4c0:	61 33       	cpi	r22, 0x31	; 49
 4c2:	19 f4       	brne	.+6      	; 0x4ca <encodeBIN+0x22>
		dest[i] = 1;
 4c4:	31 83       	std	Z+1, r19	; 0x01
 4c6:	20 83       	st	Z, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <encodeBIN+0x26>
		else
		dest[i] = 0;
 4ca:	11 82       	std	Z+1, r1	; 0x01
 4cc:	10 82       	st	Z, r1
		encodeBIN("1111", destination, length);
	}
}

void encodeBIN(const char * convert, int * dest, int length) {
	for (int i = 0; i< length; i++) {
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	32 96       	adiw	r30, 0x02	; 2
 4d2:	84 17       	cp	r24, r20
 4d4:	95 07       	cpc	r25, r21
 4d6:	99 f7       	brne	.-26     	; 0x4be <encodeBIN+0x16>
 4d8:	08 95       	ret

000004da <encodeCommand>:
	else if (source[0] == '1' && source[1] == '5') {
		encodeBIN("1111", destination, length);
	}
}

void encodeCommand(const char * source, int * destination, int length) {
 4da:	fc 01       	movw	r30, r24
	if (source[2] == '0' && source[3] == '0') {
 4dc:	82 81       	ldd	r24, Z+2	; 0x02
 4de:	80 33       	cpi	r24, 0x30	; 48
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <encodeCommand+0xa>
 4e2:	47 c0       	rjmp	.+142    	; 0x572 <encodeCommand+0x98>
 4e4:	83 81       	ldd	r24, Z+3	; 0x03
 4e6:	80 33       	cpi	r24, 0x30	; 48
 4e8:	29 f4       	brne	.+10     	; 0x4f4 <encodeCommand+0x1a>
		encodeBIN("0000", destination, length);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 4f2:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '1') {
 4f4:	81 33       	cpi	r24, 0x31	; 49
 4f6:	29 f4       	brne	.+10     	; 0x502 <encodeCommand+0x28>
		encodeBIN("0001", destination, length);
 4f8:	85 e0       	ldi	r24, 0x05	; 5
 4fa:	92 e0       	ldi	r25, 0x02	; 2
 4fc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 500:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '2') {
 502:	82 33       	cpi	r24, 0x32	; 50
 504:	29 f4       	brne	.+10     	; 0x510 <encodeCommand+0x36>
		encodeBIN("0010", destination, length);
 506:	8a e0       	ldi	r24, 0x0A	; 10
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 50e:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '3') {
 510:	83 33       	cpi	r24, 0x33	; 51
 512:	29 f4       	brne	.+10     	; 0x51e <encodeCommand+0x44>
		encodeBIN("0011", destination, length);
 514:	8f e0       	ldi	r24, 0x0F	; 15
 516:	92 e0       	ldi	r25, 0x02	; 2
 518:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 51c:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '4') {
 51e:	84 33       	cpi	r24, 0x34	; 52
 520:	29 f4       	brne	.+10     	; 0x52c <encodeCommand+0x52>
		encodeBIN("0100", destination, length);
 522:	84 e1       	ldi	r24, 0x14	; 20
 524:	92 e0       	ldi	r25, 0x02	; 2
 526:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 52a:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '5') {
 52c:	85 33       	cpi	r24, 0x35	; 53
 52e:	29 f4       	brne	.+10     	; 0x53a <encodeCommand+0x60>
		encodeBIN("0101", destination, length);
 530:	89 e1       	ldi	r24, 0x19	; 25
 532:	92 e0       	ldi	r25, 0x02	; 2
 534:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 538:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '6') {
 53a:	86 33       	cpi	r24, 0x36	; 54
 53c:	29 f4       	brne	.+10     	; 0x548 <encodeCommand+0x6e>
		encodeBIN("0110", destination, length);
 53e:	8e e1       	ldi	r24, 0x1E	; 30
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 546:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '7') {
 548:	87 33       	cpi	r24, 0x37	; 55
 54a:	29 f4       	brne	.+10     	; 0x556 <encodeCommand+0x7c>
		encodeBIN("0111", destination, length);
 54c:	83 e2       	ldi	r24, 0x23	; 35
 54e:	92 e0       	ldi	r25, 0x02	; 2
 550:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 554:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '8') {
 556:	88 33       	cpi	r24, 0x38	; 56
 558:	29 f4       	brne	.+10     	; 0x564 <encodeCommand+0x8a>
		encodeBIN("1000", destination, length);
 55a:	88 e2       	ldi	r24, 0x28	; 40
 55c:	92 e0       	ldi	r25, 0x02	; 2
 55e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 562:	08 95       	ret
	}
	else if (source[2] == '0' && source[3] == '9') {
 564:	89 33       	cpi	r24, 0x39	; 57
 566:	89 f5       	brne	.+98     	; 0x5ca <encodeCommand+0xf0>
		encodeBIN("1001", destination, length);
 568:	8d e2       	ldi	r24, 0x2D	; 45
 56a:	92 e0       	ldi	r25, 0x02	; 2
 56c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 570:	08 95       	ret
	}
	else if (source[2] == '1' && source[3] == '0') {
 572:	81 33       	cpi	r24, 0x31	; 49
 574:	51 f5       	brne	.+84     	; 0x5ca <encodeCommand+0xf0>
 576:	83 81       	ldd	r24, Z+3	; 0x03
 578:	80 33       	cpi	r24, 0x30	; 48
 57a:	29 f4       	brne	.+10     	; 0x586 <encodeCommand+0xac>
		encodeBIN("1010", destination, length);
 57c:	82 e3       	ldi	r24, 0x32	; 50
 57e:	92 e0       	ldi	r25, 0x02	; 2
 580:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 584:	08 95       	ret
	}
	else if (source[2] == '1' && source[3] == '1') {
 586:	81 33       	cpi	r24, 0x31	; 49
 588:	29 f4       	brne	.+10     	; 0x594 <encodeCommand+0xba>
		encodeBIN("1011", destination, length);
 58a:	87 e3       	ldi	r24, 0x37	; 55
 58c:	92 e0       	ldi	r25, 0x02	; 2
 58e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 592:	08 95       	ret
	}
	else if (source[2] == '1' && source[3] == '2') {
 594:	82 33       	cpi	r24, 0x32	; 50
 596:	29 f4       	brne	.+10     	; 0x5a2 <encodeCommand+0xc8>
		encodeBIN("1100", destination, length);
 598:	8c e3       	ldi	r24, 0x3C	; 60
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 5a0:	08 95       	ret
	}
	else if (source[2] == '1' && source[3] == '3') {
 5a2:	83 33       	cpi	r24, 0x33	; 51
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <encodeCommand+0xd6>
		encodeBIN("1101", destination, length);
 5a6:	81 e4       	ldi	r24, 0x41	; 65
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 5ae:	08 95       	ret
	}
	else if (source[2] == '1' && source[3] == '4') {
 5b0:	84 33       	cpi	r24, 0x34	; 52
 5b2:	29 f4       	brne	.+10     	; 0x5be <encodeCommand+0xe4>
		encodeBIN("1110", destination, length);
 5b4:	86 e4       	ldi	r24, 0x46	; 70
 5b6:	92 e0       	ldi	r25, 0x02	; 2
 5b8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 5bc:	08 95       	ret
	}
	else if (source[2] == '1' && source[3] == '5') {
 5be:	85 33       	cpi	r24, 0x35	; 53
 5c0:	21 f4       	brne	.+8      	; 0x5ca <encodeCommand+0xf0>
		encodeBIN("1111", destination, length);
 5c2:	8b e4       	ldi	r24, 0x4B	; 75
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 5ca:	08 95       	ret

000005cc <encodeAddress>:
	encodeCommand(source, command_dest, command_length);
	x10encode(address_dest, command_dest,x10add,x10com);
}


void encodeAddress(const char * source, int * destination, int length) {
 5cc:	fc 01       	movw	r30, r24
	if (source[0] == '0' && source[1] == '0') {
 5ce:	80 81       	ld	r24, Z
 5d0:	80 33       	cpi	r24, 0x30	; 48
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <encodeAddress+0xa>
 5d4:	47 c0       	rjmp	.+142    	; 0x664 <encodeAddress+0x98>
 5d6:	81 81       	ldd	r24, Z+1	; 0x01
 5d8:	80 33       	cpi	r24, 0x30	; 48
 5da:	29 f4       	brne	.+10     	; 0x5e6 <encodeAddress+0x1a>
		encodeBIN("0000", destination, length);
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	92 e0       	ldi	r25, 0x02	; 2
 5e0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 5e4:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '1') {
 5e6:	81 33       	cpi	r24, 0x31	; 49
 5e8:	29 f4       	brne	.+10     	; 0x5f4 <encodeAddress+0x28>
		encodeBIN("0001", destination, length);
 5ea:	85 e0       	ldi	r24, 0x05	; 5
 5ec:	92 e0       	ldi	r25, 0x02	; 2
 5ee:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 5f2:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '2') {
 5f4:	82 33       	cpi	r24, 0x32	; 50
 5f6:	29 f4       	brne	.+10     	; 0x602 <encodeAddress+0x36>
		encodeBIN("0010", destination, length);
 5f8:	8a e0       	ldi	r24, 0x0A	; 10
 5fa:	92 e0       	ldi	r25, 0x02	; 2
 5fc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 600:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '3') {
 602:	83 33       	cpi	r24, 0x33	; 51
 604:	29 f4       	brne	.+10     	; 0x610 <encodeAddress+0x44>
		encodeBIN("0011", destination, length);
 606:	8f e0       	ldi	r24, 0x0F	; 15
 608:	92 e0       	ldi	r25, 0x02	; 2
 60a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 60e:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '4') {
 610:	84 33       	cpi	r24, 0x34	; 52
 612:	29 f4       	brne	.+10     	; 0x61e <encodeAddress+0x52>
		encodeBIN("0100", destination, length);
 614:	84 e1       	ldi	r24, 0x14	; 20
 616:	92 e0       	ldi	r25, 0x02	; 2
 618:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 61c:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '5') {
 61e:	85 33       	cpi	r24, 0x35	; 53
 620:	29 f4       	brne	.+10     	; 0x62c <encodeAddress+0x60>
		encodeBIN("0101", destination, length);
 622:	89 e1       	ldi	r24, 0x19	; 25
 624:	92 e0       	ldi	r25, 0x02	; 2
 626:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 62a:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '6') {
 62c:	86 33       	cpi	r24, 0x36	; 54
 62e:	29 f4       	brne	.+10     	; 0x63a <encodeAddress+0x6e>
		encodeBIN("0110", destination, length);
 630:	8e e1       	ldi	r24, 0x1E	; 30
 632:	92 e0       	ldi	r25, 0x02	; 2
 634:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 638:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '7') {
 63a:	87 33       	cpi	r24, 0x37	; 55
 63c:	29 f4       	brne	.+10     	; 0x648 <encodeAddress+0x7c>
		encodeBIN("0111", destination, length);
 63e:	83 e2       	ldi	r24, 0x23	; 35
 640:	92 e0       	ldi	r25, 0x02	; 2
 642:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 646:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '8') {
 648:	88 33       	cpi	r24, 0x38	; 56
 64a:	29 f4       	brne	.+10     	; 0x656 <encodeAddress+0x8a>
		encodeBIN("1000", destination, length);
 64c:	88 e2       	ldi	r24, 0x28	; 40
 64e:	92 e0       	ldi	r25, 0x02	; 2
 650:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 654:	08 95       	ret
	}
	else if (source[0] == '0' && source[1] == '9') {
 656:	89 33       	cpi	r24, 0x39	; 57
 658:	89 f5       	brne	.+98     	; 0x6bc <encodeAddress+0xf0>
		encodeBIN("1001", destination, length);
 65a:	8d e2       	ldi	r24, 0x2D	; 45
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 662:	08 95       	ret
	}
	else if (source[0] == '1' && source[1] == '0') {
 664:	81 33       	cpi	r24, 0x31	; 49
 666:	51 f5       	brne	.+84     	; 0x6bc <encodeAddress+0xf0>
 668:	81 81       	ldd	r24, Z+1	; 0x01
 66a:	80 33       	cpi	r24, 0x30	; 48
 66c:	29 f4       	brne	.+10     	; 0x678 <encodeAddress+0xac>
		encodeBIN("1010", destination, length);
 66e:	82 e3       	ldi	r24, 0x32	; 50
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 676:	08 95       	ret
	}
	else if (source[0] == '1' && source[1] == '1') {
 678:	81 33       	cpi	r24, 0x31	; 49
 67a:	29 f4       	brne	.+10     	; 0x686 <encodeAddress+0xba>
		encodeBIN("1011", destination, length);
 67c:	87 e3       	ldi	r24, 0x37	; 55
 67e:	92 e0       	ldi	r25, 0x02	; 2
 680:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 684:	08 95       	ret
	}
	else if (source[0] == '1' && source[1] == '2') {
 686:	82 33       	cpi	r24, 0x32	; 50
 688:	29 f4       	brne	.+10     	; 0x694 <encodeAddress+0xc8>
		encodeBIN("1100", destination, length);
 68a:	8c e3       	ldi	r24, 0x3C	; 60
 68c:	92 e0       	ldi	r25, 0x02	; 2
 68e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 692:	08 95       	ret
	}
	else if (source[0] == '1' && source[1] == '3') {
 694:	83 33       	cpi	r24, 0x33	; 51
 696:	29 f4       	brne	.+10     	; 0x6a2 <encodeAddress+0xd6>
		encodeBIN("1101", destination, length);
 698:	81 e4       	ldi	r24, 0x41	; 65
 69a:	92 e0       	ldi	r25, 0x02	; 2
 69c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 6a0:	08 95       	ret
	}
	else if (source[0] == '1' && source[1] == '4') {
 6a2:	84 33       	cpi	r24, 0x34	; 52
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <encodeAddress+0xe4>
		encodeBIN("1110", destination, length);
 6a6:	86 e4       	ldi	r24, 0x46	; 70
 6a8:	92 e0       	ldi	r25, 0x02	; 2
 6aa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 6ae:	08 95       	ret
	}
	else if (source[0] == '1' && source[1] == '5') {
 6b0:	85 33       	cpi	r24, 0x35	; 53
 6b2:	21 f4       	brne	.+8      	; 0x6bc <encodeAddress+0xf0>
		encodeBIN("1111", destination, length);
 6b4:	8b e4       	ldi	r24, 0x4B	; 75
 6b6:	92 e0       	ldi	r25, 0x02	; 2
 6b8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encodeBIN>
 6bc:	08 95       	ret

000006be <x10encode>:
		dest[i] = 1;
		else
		dest[i] = 0;
	}
}
void x10encode(int * adr, int * com,int * x10add,int * x10com) {	
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	c6 2f       	mov	r28, r22
 6c4:	d2 2f       	mov	r29, r18
 6c6:	63 2f       	mov	r22, r19
	for (int i = 1; i < (ADDRESS_LENGTH)+1; i++) {
 6c8:	a8 2f       	mov	r26, r24
 6ca:	b9 2f       	mov	r27, r25
 6cc:	e4 2f       	mov	r30, r20
 6ce:	f5 2f       	mov	r31, r21
 6d0:	21 e0       	ldi	r18, 0x01	; 1
 6d2:	30 e0       	ldi	r19, 0x00	; 0
			x10add[(i * 2) - 2] = 1;
			x10add[(i * 2) - 1] = 0;
		}
		else {
			x10add[(i * 2) - 2] = 0;
			x10add[(i * 2) - 1] = 1;
 6d4:	41 e0       	ldi	r20, 0x01	; 1
 6d6:	50 e0       	ldi	r21, 0x00	; 0
		dest[i] = 0;
	}
}
void x10encode(int * adr, int * com,int * x10add,int * x10com) {	
	for (int i = 1; i < (ADDRESS_LENGTH)+1; i++) {
		if (adr[i-1] == 1) {
 6d8:	8d 91       	ld	r24, X+
 6da:	9d 91       	ld	r25, X+
 6dc:	81 30       	cpi	r24, 0x01	; 1
 6de:	91 05       	cpc	r25, r1
 6e0:	29 f4       	brne	.+10     	; 0x6ec <x10encode+0x2e>
			x10add[(i * 2) - 2] = 1;
 6e2:	51 83       	std	Z+1, r21	; 0x01
 6e4:	40 83       	st	Z, r20
			x10add[(i * 2) - 1] = 0;
 6e6:	13 82       	std	Z+3, r1	; 0x03
 6e8:	12 82       	std	Z+2, r1	; 0x02
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <x10encode+0x36>
		}
		else {
			x10add[(i * 2) - 2] = 0;
 6ec:	11 82       	std	Z+1, r1	; 0x01
 6ee:	10 82       	st	Z, r1
			x10add[(i * 2) - 1] = 1;
 6f0:	53 83       	std	Z+3, r21	; 0x03
 6f2:	42 83       	std	Z+2, r20	; 0x02
		else
		dest[i] = 0;
	}
}
void x10encode(int * adr, int * com,int * x10add,int * x10com) {	
	for (int i = 1; i < (ADDRESS_LENGTH)+1; i++) {
 6f4:	2f 5f       	subi	r18, 0xFF	; 255
 6f6:	3f 4f       	sbci	r19, 0xFF	; 255
 6f8:	34 96       	adiw	r30, 0x04	; 4
 6fa:	25 30       	cpi	r18, 0x05	; 5
 6fc:	31 05       	cpc	r19, r1
 6fe:	61 f7       	brne	.-40     	; 0x6d8 <x10encode+0x1a>
 700:	ac 2f       	mov	r26, r28
 702:	b7 2f       	mov	r27, r23
 704:	ed 2f       	mov	r30, r29
 706:	f6 2f       	mov	r31, r22
 708:	21 e0       	ldi	r18, 0x01	; 1
 70a:	30 e0       	ldi	r19, 0x00	; 0
		x10com[(i * 2) - 2] = 1;
		x10com[(i * 2) - 1] = 0;
	}
	else {
		x10com[(i * 2) - 2] = 0;
		x10com[(i * 2) - 1] = 1;
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	50 e0       	ldi	r21, 0x00	; 0
			x10add[(i * 2) - 2] = 0;
			x10add[(i * 2) - 1] = 1;
			}
		}		
	for (int i = 1; i < (COMMAND_LENGTH)+1; i++) {
		if (com[((i)-1)] == 1) {							// Konvertering af kommandoer til komplimentære bits
 710:	8d 91       	ld	r24, X+
 712:	9d 91       	ld	r25, X+
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	91 05       	cpc	r25, r1
 718:	29 f4       	brne	.+10     	; 0x724 <x10encode+0x66>
		x10com[(i * 2) - 2] = 1;
 71a:	51 83       	std	Z+1, r21	; 0x01
 71c:	40 83       	st	Z, r20
		x10com[(i * 2) - 1] = 0;
 71e:	13 82       	std	Z+3, r1	; 0x03
 720:	12 82       	std	Z+2, r1	; 0x02
 722:	04 c0       	rjmp	.+8      	; 0x72c <x10encode+0x6e>
	}
	else {
		x10com[(i * 2) - 2] = 0;
 724:	11 82       	std	Z+1, r1	; 0x01
 726:	10 82       	st	Z, r1
		x10com[(i * 2) - 1] = 1;
 728:	53 83       	std	Z+3, r21	; 0x03
 72a:	42 83       	std	Z+2, r20	; 0x02
		else {
			x10add[(i * 2) - 2] = 0;
			x10add[(i * 2) - 1] = 1;
			}
		}		
	for (int i = 1; i < (COMMAND_LENGTH)+1; i++) {
 72c:	2f 5f       	subi	r18, 0xFF	; 255
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	34 96       	adiw	r30, 0x04	; 4
 732:	25 30       	cpi	r18, 0x05	; 5
 734:	31 05       	cpc	r19, r1
 736:	61 f7       	brne	.-40     	; 0x710 <x10encode+0x52>
	else {
		x10com[(i * 2) - 2] = 0;
		x10com[(i * 2) - 1] = 1;
	}
}
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	08 95       	ret

0000073e <toEncode>:
* Created: 30-04-2018 12:56:25
*  Author: Valdemar
*/
#include "Encoder.h"

void toEncode(const char* source, int * address_dest, int address_length, int* command_dest, int command_length, int * x10add, int * x10com) {
 73e:	8f 92       	push	r8
 740:	9f 92       	push	r9
 742:	af 92       	push	r10
 744:	bf 92       	push	r11
 746:	cf 92       	push	r12
 748:	df 92       	push	r13
 74a:	ef 92       	push	r14
 74c:	ff 92       	push	r15
 74e:	0f 93       	push	r16
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	ec 01       	movw	r28, r24
 758:	5b 01       	movw	r10, r22
 75a:	49 01       	movw	r8, r18
	encodeAddress(source, address_dest, address_length);
 75c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <encodeAddress>
	encodeCommand(source, command_dest, command_length);
 760:	ce 01       	movw	r24, r28
 762:	b4 01       	movw	r22, r8
 764:	a8 01       	movw	r20, r16
 766:	0e 94 6d 02 	call	0x4da	; 0x4da <encodeCommand>
	x10encode(address_dest, command_dest,x10add,x10com);
 76a:	c5 01       	movw	r24, r10
 76c:	b4 01       	movw	r22, r8
 76e:	a7 01       	movw	r20, r14
 770:	96 01       	movw	r18, r12
 772:	0e 94 5f 03 	call	0x6be	; 0x6be <x10encode>
}
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	ff 90       	pop	r15
 780:	ef 90       	pop	r14
 782:	df 90       	pop	r13
 784:	cf 90       	pop	r12
 786:	bf 90       	pop	r11
 788:	af 90       	pop	r10
 78a:	9f 90       	pop	r9
 78c:	8f 90       	pop	r8
 78e:	08 95       	ret

00000790 <main>:
volatile int x10address[ADDRESS_LENGTH*2];
volatile int x10command[COMMAND_LENGTH*2];


int main(){
	setup();
 790:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <setup>
		data[2] = 0;
		data[3] = 0;*/
	//}
	InitUART(9600,8,'N',1);
	while(getMessage()== 0){}
	toEncode(data,address,ADDRESS_LENGTH,command,COMMAND_LENGTH,x10address,x10command);
 794:	0f 2e       	mov	r0, r31
 796:	fd e7       	ldi	r31, 0x7D	; 125
 798:	8f 2e       	mov	r8, r31
 79a:	f2 e0       	ldi	r31, 0x02	; 2
 79c:	9f 2e       	mov	r9, r31
 79e:	f0 2d       	mov	r31, r0
 7a0:	0f 2e       	mov	r0, r31
 7a2:	fd e5       	ldi	r31, 0x5D	; 93
 7a4:	6f 2e       	mov	r6, r31
 7a6:	f2 e0       	ldi	r31, 0x02	; 2
 7a8:	7f 2e       	mov	r7, r31
 7aa:	f0 2d       	mov	r31, r0
 7ac:	0f 2e       	mov	r0, r31
 7ae:	f5 e7       	ldi	r31, 0x75	; 117
 7b0:	4f 2e       	mov	r4, r31
 7b2:	f2 e0       	ldi	r31, 0x02	; 2
 7b4:	5f 2e       	mov	r5, r31
 7b6:	f0 2d       	mov	r31, r0
 7b8:	c1 e8       	ldi	r28, 0x81	; 129
 7ba:	d2 e0       	ldi	r29, 0x02	; 2
 7bc:	0f 2e       	mov	r0, r31
 7be:	f5 e6       	ldi	r31, 0x65	; 101
 7c0:	af 2e       	mov	r10, r31
 7c2:	f2 e0       	ldi	r31, 0x02	; 2
 7c4:	bf 2e       	mov	r11, r31
 7c6:	f0 2d       	mov	r31, r0
		/*data[0] = 0;
		data[1] = 0;
		data[2] = 0;
		data[3] = 0;*/
	//}
	InitUART(9600,8,'N',1);
 7c8:	60 e8       	ldi	r22, 0x80	; 128
 7ca:	75 e2       	ldi	r23, 0x25	; 37
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	48 e0       	ldi	r20, 0x08	; 8
 7d2:	2e e4       	ldi	r18, 0x4E	; 78
 7d4:	01 e0       	ldi	r16, 0x01	; 1
 7d6:	0e 94 4c 05 	call	0xa98	; 0xa98 <InitUART>
	while(getMessage()== 0){}
 7da:	0e 94 3a 06 	call	0xc74	; 0xc74 <getMessage>
 7de:	00 97       	sbiw	r24, 0x00	; 0
 7e0:	e1 f3       	breq	.-8      	; 0x7da <main+0x4a>
	toEncode(data,address,ADDRESS_LENGTH,command,COMMAND_LENGTH,x10address,x10command);
 7e2:	c4 01       	movw	r24, r8
 7e4:	b3 01       	movw	r22, r6
 7e6:	44 e0       	ldi	r20, 0x04	; 4
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	92 01       	movw	r18, r4
 7ec:	04 e0       	ldi	r16, 0x04	; 4
 7ee:	10 e0       	ldi	r17, 0x00	; 0
 7f0:	7e 01       	movw	r14, r28
 7f2:	65 01       	movw	r12, r10
 7f4:	0e 94 9f 03 	call	0x73e	; 0x73e <toEncode>
	startTransmission(x10address,x10command);
 7f8:	ce 01       	movw	r24, r28
 7fa:	b5 01       	movw	r22, r10
 7fc:	0e 94 19 02 	call	0x432	; 0x432 <startTransmission>
	reset();
 800:	0e 94 32 01 	call	0x264	; 0x264 <reset>
	}
 804:	e1 cf       	rjmp	.-62     	; 0x7c8 <main+0x38>

00000806 <__vector_1>:
}

ISR(INT0_vect){
 806:	1f 92       	push	r1
 808:	0f 92       	push	r0
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	0f 92       	push	r0
 80e:	0b b6       	in	r0, 0x3b	; 59
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
	if(getWait() == 1){
 82c:	0e 94 ed 00 	call	0x1da	; 0x1da <getWait>
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	91 05       	cpc	r25, r1
 834:	29 f4       	brne	.+10     	; 0x840 <__vector_1+0x3a>
		//setSend(0);
		setWait(0);
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setWait>
 83e:	04 c0       	rjmp	.+8      	; 0x848 <__vector_1+0x42>
	}
	else {
		initTimer3(1);
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 4e 06 	call	0xc9c	; 0xc9c <initTimer3>
	}
}
 848:	ff 91       	pop	r31
 84a:	ef 91       	pop	r30
 84c:	bf 91       	pop	r27
 84e:	af 91       	pop	r26
 850:	9f 91       	pop	r25
 852:	8f 91       	pop	r24
 854:	7f 91       	pop	r23
 856:	6f 91       	pop	r22
 858:	5f 91       	pop	r21
 85a:	4f 91       	pop	r20
 85c:	3f 91       	pop	r19
 85e:	2f 91       	pop	r18
 860:	0f 90       	pop	r0
 862:	0b be       	out	0x3b, r0	; 59
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <__vector_25>:
ISR (USART0_RX_vect){
 86e:	1f 92       	push	r1
 870:	0f 92       	push	r0
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	0f 92       	push	r0
 876:	0b b6       	in	r0, 0x3b	; 59
 878:	0f 92       	push	r0
 87a:	11 24       	eor	r1, r1
 87c:	2f 93       	push	r18
 87e:	3f 93       	push	r19
 880:	4f 93       	push	r20
 882:	5f 93       	push	r21
 884:	6f 93       	push	r22
 886:	7f 93       	push	r23
 888:	8f 93       	push	r24
 88a:	9f 93       	push	r25
 88c:	af 93       	push	r26
 88e:	bf 93       	push	r27
 890:	ef 93       	push	r30
 892:	ff 93       	push	r31
	fillArray(data);
 894:	8d e7       	ldi	r24, 0x7D	; 125
 896:	92 e0       	ldi	r25, 0x02	; 2
 898:	0e 94 1c 06 	call	0xc38	; 0xc38 <fillArray>
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0b be       	out	0x3b, r0	; 59
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	0b b6       	in	r0, 0x3b	; 59
 8cc:	0f 92       	push	r0
 8ce:	11 24       	eor	r1, r1
 8d0:	2f 93       	push	r18
 8d2:	3f 93       	push	r19
 8d4:	4f 93       	push	r20
 8d6:	5f 93       	push	r21
 8d8:	6f 93       	push	r22
 8da:	7f 93       	push	r23
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
 8e0:	af 93       	push	r26
 8e2:	bf 93       	push	r27
 8e4:	ef 93       	push	r30
 8e6:	ff 93       	push	r31
	setSend(1);
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <setSend>
}
 8f0:	ff 91       	pop	r31
 8f2:	ef 91       	pop	r30
 8f4:	bf 91       	pop	r27
 8f6:	af 91       	pop	r26
 8f8:	9f 91       	pop	r25
 8fa:	8f 91       	pop	r24
 8fc:	7f 91       	pop	r23
 8fe:	6f 91       	pop	r22
 900:	5f 91       	pop	r21
 902:	4f 91       	pop	r20
 904:	3f 91       	pop	r19
 906:	2f 91       	pop	r18
 908:	0f 90       	pop	r0
 90a:	0b be       	out	0x3b, r0	; 59
 90c:	0f 90       	pop	r0
 90e:	0f be       	out	0x3f, r0	; 63
 910:	0f 90       	pop	r0
 912:	1f 90       	pop	r1
 914:	18 95       	reti

00000916 <__vector_15>:

ISR(TIMER2_OVF_vect){
 916:	1f 92       	push	r1
 918:	0f 92       	push	r0
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	0f 92       	push	r0
 91e:	0b b6       	in	r0, 0x3b	; 59
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
	stopTimer1();
 93c:	0e 94 43 05 	call	0xa86	; 0xa86 <stopTimer1>
	stopTimer2();
 940:	0e 94 45 05 	call	0xa8a	; 0xa8a <stopTimer2>
}
 944:	ff 91       	pop	r31
 946:	ef 91       	pop	r30
 948:	bf 91       	pop	r27
 94a:	af 91       	pop	r26
 94c:	9f 91       	pop	r25
 94e:	8f 91       	pop	r24
 950:	7f 91       	pop	r23
 952:	6f 91       	pop	r22
 954:	5f 91       	pop	r21
 956:	4f 91       	pop	r20
 958:	3f 91       	pop	r19
 95a:	2f 91       	pop	r18
 95c:	0f 90       	pop	r0
 95e:	0b be       	out	0x3b, r0	; 59
 960:	0f 90       	pop	r0
 962:	0f be       	out	0x3f, r0	; 63
 964:	0f 90       	pop	r0
 966:	1f 90       	pop	r1
 968:	18 95       	reti

0000096a <__vector_2>:

ISR(INT1_vect){
 96a:	1f 92       	push	r1
 96c:	0f 92       	push	r0
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	0f 92       	push	r0
 972:	0b b6       	in	r0, 0x3b	; 59
 974:	0f 92       	push	r0
 976:	11 24       	eor	r1, r1
 978:	2f 93       	push	r18
 97a:	3f 93       	push	r19
 97c:	4f 93       	push	r20
 97e:	5f 93       	push	r21
 980:	6f 93       	push	r22
 982:	7f 93       	push	r23
 984:	8f 93       	push	r24
 986:	9f 93       	push	r25
 988:	af 93       	push	r26
 98a:	bf 93       	push	r27
 98c:	ef 93       	push	r30
 98e:	ff 93       	push	r31
	setStatus(checkStatus());
 990:	0e 94 96 00 	call	0x12c	; 0x12c <checkStatus>
 994:	0e 94 a7 00 	call	0x14e	; 0x14e <setStatus>
}
 998:	ff 91       	pop	r31
 99a:	ef 91       	pop	r30
 99c:	bf 91       	pop	r27
 99e:	af 91       	pop	r26
 9a0:	9f 91       	pop	r25
 9a2:	8f 91       	pop	r24
 9a4:	7f 91       	pop	r23
 9a6:	6f 91       	pop	r22
 9a8:	5f 91       	pop	r21
 9aa:	4f 91       	pop	r20
 9ac:	3f 91       	pop	r19
 9ae:	2f 91       	pop	r18
 9b0:	0f 90       	pop	r0
 9b2:	0b be       	out	0x3b, r0	; 59
 9b4:	0f 90       	pop	r0
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	0f 90       	pop	r0
 9ba:	1f 90       	pop	r1
 9bc:	18 95       	reti

000009be <__vector_35>:

ISR(TIMER3_OVF_vect){
 9be:	1f 92       	push	r1
 9c0:	0f 92       	push	r0
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	0f 92       	push	r0
 9c6:	0b b6       	in	r0, 0x3b	; 59
 9c8:	0f 92       	push	r0
 9ca:	11 24       	eor	r1, r1
 9cc:	2f 93       	push	r18
 9ce:	3f 93       	push	r19
 9d0:	4f 93       	push	r20
 9d2:	5f 93       	push	r21
 9d4:	6f 93       	push	r22
 9d6:	7f 93       	push	r23
 9d8:	8f 93       	push	r24
 9da:	9f 93       	push	r25
 9dc:	af 93       	push	r26
 9de:	bf 93       	push	r27
 9e0:	ef 93       	push	r30
 9e2:	ff 93       	push	r31
	setSend(1);
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <setSend>
	if(getCounterTimer() == 0){
 9ec:	0e 94 78 06 	call	0xcf0	; 0xcf0 <getCounterTimer>
 9f0:	00 97       	sbiw	r24, 0x00	; 0
 9f2:	49 f4       	brne	.+18     	; 0xa06 <__vector_35+0x48>
		setCounterTimer(1);
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 73 06 	call	0xce6	; 0xce6 <setCounterTimer>
		initTimer3(10);
 9fc:	8a e0       	ldi	r24, 0x0A	; 10
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 4e 06 	call	0xc9c	; 0xc9c <initTimer3>
 a04:	0b c0       	rjmp	.+22     	; 0xa1c <__vector_35+0x5e>
	}
	else if(getCounterTimer() == 1){
 a06:	0e 94 78 06 	call	0xcf0	; 0xcf0 <getCounterTimer>
 a0a:	81 30       	cpi	r24, 0x01	; 1
 a0c:	91 05       	cpc	r25, r1
 a0e:	31 f4       	brne	.+12     	; 0xa1c <__vector_35+0x5e>
		setCounterTimer(0);
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 73 06 	call	0xce6	; 0xce6 <setCounterTimer>
		stopTimer3();
 a18:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <stopTimer3>
	}
 a1c:	ff 91       	pop	r31
 a1e:	ef 91       	pop	r30
 a20:	bf 91       	pop	r27
 a22:	af 91       	pop	r26
 a24:	9f 91       	pop	r25
 a26:	8f 91       	pop	r24
 a28:	7f 91       	pop	r23
 a2a:	6f 91       	pop	r22
 a2c:	5f 91       	pop	r21
 a2e:	4f 91       	pop	r20
 a30:	3f 91       	pop	r19
 a32:	2f 91       	pop	r18
 a34:	0f 90       	pop	r0
 a36:	0b be       	out	0x3b, r0	; 59
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti

00000a42 <initTimer0>:
#include "Controller.h"
#include <avr/io.h>

//Timer 0 functions
void initTimer0(){
	TCCR0B |= 0b00000100; // 256 clock prescaler
 a42:	85 b5       	in	r24, 0x25	; 37
 a44:	84 60       	ori	r24, 0x04	; 4
 a46:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0b00000001;
 a48:	ee e6       	ldi	r30, 0x6E	; 110
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	81 60       	ori	r24, 0x01	; 1
 a50:	80 83       	st	Z, r24
	TCNT0 = 48; //3.3 ms to overflow
 a52:	80 e3       	ldi	r24, 0x30	; 48
 a54:	86 bd       	out	0x26, r24	; 38
}
 a56:	08 95       	ret

00000a58 <stopTimer0>:
void stopTimer0(){
	TCCR0A = 0;
 a58:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 a5a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
 a5c:	10 92 6e 00 	sts	0x006E, r1
}
 a60:	08 95       	ret

00000a62 <initTimer2>:
	PORTB |= 0b00100000;
	initTimer2();
}

void initTimer2(){
	TIMSK2 |= 1;
 a62:	e0 e7       	ldi	r30, 0x70	; 112
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	81 60       	ori	r24, 0x01	; 1
 a6a:	80 83       	st	Z, r24
	TCCR2B |= 0b00000110;
 a6c:	e1 eb       	ldi	r30, 0xB1	; 177
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	80 81       	ld	r24, Z
 a72:	86 60       	ori	r24, 0x06	; 6
 a74:	80 83       	st	Z, r24
	TCNT2 = 193;
 a76:	81 ec       	ldi	r24, 0xC1	; 193
 a78:	80 93 b2 00 	sts	0x00B2, r24
}
 a7c:	08 95       	ret

00000a7e <sendPWM>:
void sendPWM(){
	/*TCCR1A |= 0b10000010; // initiering af PWM ved timer 1
	TCCR1B |= 0b00011001;
	OCR1A = 132/2;
	ICR1 = 132;*/
	PORTB |= 0b00100000;
 a7e:	2d 9a       	sbi	0x05, 5	; 5
	initTimer2();
 a80:	0e 94 31 05 	call	0xa62	; 0xa62 <initTimer2>
}
 a84:	08 95       	ret

00000a86 <stopTimer1>:
	TCNT2 = 193;
}
void stopTimer1(){
	//TCCR1A = 0;
	//TCCR1B = 0;
	PORTB &= 0b11011111;
 a86:	2d 98       	cbi	0x05, 5	; 5
}
 a88:	08 95       	ret

00000a8a <stopTimer2>:
void stopTimer2(){
	TCCR2A = 0;
 a8a:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;
 a8e:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
 a92:	10 92 70 00 	sts	0x0070, r1
 a96:	08 95       	ret

00000a98 <InitUART>:
	Databits: Wanted number of Data Bits (5-8).
	Parity: 'E' (Even parity), 'O' (Odd parity), otherwise No Parity.
	Rx_Int: If non-zero, receiver interrupt will be enabled.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, char Parity, unsigned char RX_Int)
{
 a98:	cf 92       	push	r12
 a9a:	df 92       	push	r13
 a9c:	ef 92       	push	r14
 a9e:	ff 92       	push	r15
 aa0:	0f 93       	push	r16
 aa2:	dc 01       	movw	r26, r24
 aa4:	cb 01       	movw	r24, r22
  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 aa6:	0f 2e       	mov	r0, r31
 aa8:	f2 e9       	ldi	r31, 0x92	; 146
 aaa:	cf 2e       	mov	r12, r31
 aac:	ff ef       	ldi	r31, 0xFF	; 255
 aae:	df 2e       	mov	r13, r31
 ab0:	ff ef       	ldi	r31, 0xFF	; 255
 ab2:	ef 2e       	mov	r14, r31
 ab4:	ff ef       	ldi	r31, 0xFF	; 255
 ab6:	ff 2e       	mov	r15, r31
 ab8:	f0 2d       	mov	r31, r0
 aba:	c8 0e       	add	r12, r24
 abc:	d9 1e       	adc	r13, r25
 abe:	ea 1e       	adc	r14, r26
 ac0:	fb 1e       	adc	r15, r27
 ac2:	33 e9       	ldi	r19, 0x93	; 147
 ac4:	c3 16       	cp	r12, r19
 ac6:	31 ec       	ldi	r19, 0xC1	; 193
 ac8:	d3 06       	cpc	r13, r19
 aca:	31 e0       	ldi	r19, 0x01	; 1
 acc:	e3 06       	cpc	r14, r19
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	f3 06       	cpc	r15, r19
 ad2:	08 f0       	brcs	.+2      	; 0xad6 <InitUART+0x3e>
 ad4:	46 c0       	rjmp	.+140    	; 0xb62 <InitUART+0xca>
 ad6:	45 30       	cpi	r20, 0x05	; 5
 ad8:	08 f4       	brcc	.+2      	; 0xadc <InitUART+0x44>
 ada:	43 c0       	rjmp	.+134    	; 0xb62 <InitUART+0xca>
 adc:	49 30       	cpi	r20, 0x09	; 9
 ade:	08 f0       	brcs	.+2      	; 0xae2 <InitUART+0x4a>
 ae0:	40 c0       	rjmp	.+128    	; 0xb62 <InitUART+0xca>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSR0A = 0b00100000;
 ae2:	30 e2       	ldi	r19, 0x20	; 32
 ae4:	30 93 c0 00 	sts	0x00C0, r19
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSR0B = 0b00011000;
 ae8:	38 e1       	ldi	r19, 0x18	; 24
 aea:	30 93 c1 00 	sts	0x00C1, r19
    // Enable RX interrupt (if wanted by parameter)
    if (RX_Int)
 aee:	00 23       	and	r16, r16
 af0:	29 f0       	breq	.+10     	; 0xafc <InitUART+0x64>
		UCSR0B |= 0b10000000;
 af2:	e1 ec       	ldi	r30, 0xC1	; 193
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	30 81       	ld	r19, Z
 af8:	30 68       	ori	r19, 0x80	; 128
 afa:	30 83       	st	Z, r19
    // Asynchronous operation, 1 stop bit
    // Bit 2 and bit 1 controls the number of data bits
    UCSR0C = (DataBit-5)<<1;
 afc:	45 50       	subi	r20, 0x05	; 5
 afe:	44 0f       	add	r20, r20
 b00:	e2 ec       	ldi	r30, 0xC2	; 194
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	40 83       	st	Z, r20
	// Set parity bits (if parity used)
	UCSR0C |= 0b00001000;
 b06:	30 81       	ld	r19, Z
 b08:	38 60       	ori	r19, 0x08	; 8
 b0a:	30 83       	st	Z, r19
    if (Parity == 'E')
 b0c:	25 34       	cpi	r18, 0x45	; 69
 b0e:	21 f4       	brne	.+8      	; 0xb18 <InitUART+0x80>
    UCSR0C |= 0b00100000;
 b10:	20 81       	ld	r18, Z
 b12:	20 62       	ori	r18, 0x20	; 32
 b14:	20 83       	st	Z, r18
 b16:	07 c0       	rjmp	.+14     	; 0xb26 <InitUART+0x8e>
    else if (Parity == 'O')	  
 b18:	2f 34       	cpi	r18, 0x4F	; 79
 b1a:	29 f4       	brne	.+10     	; 0xb26 <InitUART+0x8e>
    UCSR0C |= 0b00110000;	
 b1c:	e2 ec       	ldi	r30, 0xC2	; 194
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	20 81       	ld	r18, Z
 b22:	20 63       	ori	r18, 0x30	; 48
 b24:	20 83       	st	Z, r18
    // Set Baud Rate according to the parameter BaudRate:
    // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
    //                   then write the two 8-bit registers separately):
    // Set Baud Rate according to the parameter BaudRate:
    UBRR0 = XTAL/(16*BaudRate) - 1;
 b26:	88 0f       	add	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	aa 1f       	adc	r26, r26
 b2c:	bb 1f       	adc	r27, r27
 b2e:	88 0f       	add	r24, r24
 b30:	99 1f       	adc	r25, r25
 b32:	aa 1f       	adc	r26, r26
 b34:	bb 1f       	adc	r27, r27
 b36:	9c 01       	movw	r18, r24
 b38:	ad 01       	movw	r20, r26
 b3a:	22 0f       	add	r18, r18
 b3c:	33 1f       	adc	r19, r19
 b3e:	44 1f       	adc	r20, r20
 b40:	55 1f       	adc	r21, r21
 b42:	22 0f       	add	r18, r18
 b44:	33 1f       	adc	r19, r19
 b46:	44 1f       	adc	r20, r20
 b48:	55 1f       	adc	r21, r21
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	74 e2       	ldi	r23, 0x24	; 36
 b4e:	84 ef       	ldi	r24, 0xF4	; 244
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__udivmodsi4>
 b56:	21 50       	subi	r18, 0x01	; 1
 b58:	30 40       	sbci	r19, 0x00	; 0
 b5a:	30 93 c5 00 	sts	0x00C5, r19
 b5e:	20 93 c4 00 	sts	0x00C4, r18
  }  
}
 b62:	0f 91       	pop	r16
 b64:	ff 90       	pop	r15
 b66:	ef 90       	pop	r14
 b68:	df 90       	pop	r13
 b6a:	cf 90       	pop	r12
 b6c:	08 95       	ret

00000b6e <disableUART>:
void disableUART(){
	UCSR0B = 0;
 b6e:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0A = 0;
 b72:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0;
 b76:	10 92 c2 00 	sts	0x00C2, r1
	UBRR0 = 0;
 b7a:	10 92 c5 00 	sts	0x00C5, r1
 b7e:	10 92 c4 00 	sts	0x00C4, r1
}
 b82:	08 95       	ret

00000b84 <CharReady>:
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
   return UCSR0A & (1<<7);
 b84:	80 91 c0 00 	lds	r24, 0x00C0
}
 b88:	80 78       	andi	r24, 0x80	; 128
 b8a:	08 95       	ret

00000b8c <ReadChar>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
 b8c:	e0 ec       	ldi	r30, 0xC0	; 192
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	80 81       	ld	r24, Z
 b92:	88 23       	and	r24, r24
 b94:	ec f7       	brge	.-6      	; 0xb90 <ReadChar+0x4>
  {}                        
  // Then return it
  return UDR0;
 b96:	80 91 c6 00 	lds	r24, 0x00C6
}
 b9a:	08 95       	ret

00000b9c <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 b9c:	e0 ec       	ldi	r30, 0xC0	; 192
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	90 81       	ld	r25, Z
 ba2:	95 ff       	sbrs	r25, 5
 ba4:	fd cf       	rjmp	.-6      	; 0xba0 <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 ba6:	80 93 c6 00 	sts	0x00C6, r24
}
 baa:	08 95       	ret

00000bac <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 bac:	cf 93       	push	r28
 bae:	df 93       	push	r29
 bb0:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 bb2:	88 81       	ld	r24, Y
 bb4:	88 23       	and	r24, r24
 bb6:	31 f0       	breq	.+12     	; 0xbc4 <SendString+0x18>
/*************************************************************************
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
 bb8:	21 96       	adiw	r28, 0x01	; 1
{
  // Repeat until zero-termination
  while (*Streng != 0)
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 bba:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 bbe:	89 91       	ld	r24, Y+
 bc0:	88 23       	and	r24, r24
 bc2:	d9 f7       	brne	.-10     	; 0xbba <SendString+0xe>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	08 95       	ret

00000bca <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 bca:	cf 93       	push	r28
 bcc:	df 93       	push	r29
 bce:	cd b7       	in	r28, 0x3d	; 61
 bd0:	de b7       	in	r29, 0x3e	; 62
 bd2:	27 97       	sbiw	r28, 0x07	; 7
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
 bde:	be 01       	movw	r22, r28
 be0:	6f 5f       	subi	r22, 0xFF	; 255
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	4a e0       	ldi	r20, 0x0A	; 10
 be6:	50 e0       	ldi	r21, 0x00	; 0
 be8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <itoa>
  // - then send the string
  SendString(array);
 bec:	ce 01       	movw	r24, r28
 bee:	01 96       	adiw	r24, 0x01	; 1
 bf0:	0e 94 d6 05 	call	0xbac	; 0xbac <SendString>
}
 bf4:	27 96       	adiw	r28, 0x07	; 7
 bf6:	0f b6       	in	r0, 0x3f	; 63
 bf8:	f8 94       	cli
 bfa:	de bf       	out	0x3e, r29	; 62
 bfc:	0f be       	out	0x3f, r0	; 63
 bfe:	cd bf       	out	0x3d, r28	; 61
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	08 95       	ret

00000c06 <incReadIndex>:
		disableUART();
		setMessage(1);
	}
}
void incReadIndex(){
	readIndex++;
 c06:	80 91 93 02 	lds	r24, 0x0293
 c0a:	90 91 94 02 	lds	r25, 0x0294
 c0e:	01 96       	adiw	r24, 0x01	; 1
 c10:	90 93 94 02 	sts	0x0294, r25
 c14:	80 93 93 02 	sts	0x0293, r24
}
 c18:	08 95       	ret

00000c1a <getReadIndex>:
int getReadIndex(){
	return readIndex;
 c1a:	80 91 93 02 	lds	r24, 0x0293
 c1e:	90 91 94 02 	lds	r25, 0x0294
}
 c22:	08 95       	ret

00000c24 <setReadIndex>:
void setReadIndex(int r){
	readIndex = r;
 c24:	90 93 94 02 	sts	0x0294, r25
 c28:	80 93 93 02 	sts	0x0293, r24
}
 c2c:	08 95       	ret

00000c2e <setMessage>:
void setMessage(int m){
	messageReceived = m;
 c2e:	90 93 92 02 	sts	0x0292, r25
 c32:	80 93 91 02 	sts	0x0291, r24
}
 c36:	08 95       	ret

00000c38 <fillArray>:
  itoa(Tal, array, 10);
  // - then send the string
  SendString(array);
}

void fillArray(char * a){
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	ec 01       	movw	r28, r24
	a[getReadIndex()] = UDR0;
 c3e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <getReadIndex>
 c42:	20 91 c6 00 	lds	r18, 0x00C6
 c46:	c8 0f       	add	r28, r24
 c48:	d9 1f       	adc	r29, r25
 c4a:	28 83       	st	Y, r18
	incReadIndex();
 c4c:	0e 94 03 06 	call	0xc06	; 0xc06 <incReadIndex>
	if(getReadIndex() >= 4){
 c50:	0e 94 0d 06 	call	0xc1a	; 0xc1a <getReadIndex>
 c54:	84 30       	cpi	r24, 0x04	; 4
 c56:	91 05       	cpc	r25, r1
 c58:	54 f0       	brlt	.+20     	; 0xc6e <fillArray+0x36>
		setReadIndex(0);
 c5a:	80 e0       	ldi	r24, 0x00	; 0
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 94 12 06 	call	0xc24	; 0xc24 <setReadIndex>
		disableUART();
 c62:	0e 94 b7 05 	call	0xb6e	; 0xb6e <disableUART>
		setMessage(1);
 c66:	81 e0       	ldi	r24, 0x01	; 1
 c68:	90 e0       	ldi	r25, 0x00	; 0
 c6a:	0e 94 17 06 	call	0xc2e	; 0xc2e <setMessage>
	}
}
 c6e:	df 91       	pop	r29
 c70:	cf 91       	pop	r28
 c72:	08 95       	ret

00000c74 <getMessage>:
}
void setMessage(int m){
	messageReceived = m;
}
int getMessage(){
	return messageReceived;
 c74:	80 91 91 02 	lds	r24, 0x0291
 c78:	90 91 92 02 	lds	r25, 0x0292
}
 c7c:	08 95       	ret

00000c7e <initINT0>:
 *  Author: Valdemar
 */ 
#include "ZCD.h"
volatile int counterTimer;
void initINT0(){
	DDRD &= 0b11111110;
 c7e:	50 98       	cbi	0x0a, 0	; 10
	EIMSK |= 0b00000001; // enable INT0
 c80:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000010; // falling edge triggered
 c82:	e9 e6       	ldi	r30, 0x69	; 105
 c84:	f0 e0       	ldi	r31, 0x00	; 0
 c86:	80 81       	ld	r24, Z
 c88:	82 60       	ori	r24, 0x02	; 2
 c8a:	80 83       	st	Z, r24
}
 c8c:	08 95       	ret

00000c8e <disableINT0>:
void disableINT0(){
	EIMSK &= 0b11111110;
 c8e:	e8 98       	cbi	0x1d, 0	; 29
	EICRA &= 0b11111100;
 c90:	e9 e6       	ldi	r30, 0x69	; 105
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	80 81       	ld	r24, Z
 c96:	8c 7f       	andi	r24, 0xFC	; 252
 c98:	80 83       	st	Z, r24
}
 c9a:	08 95       	ret

00000c9c <initTimer3>:
void initTimer3(int ms){
	if(ms == 1){
 c9c:	81 30       	cpi	r24, 0x01	; 1
 c9e:	91 05       	cpc	r25, r1
 ca0:	71 f4       	brne	.+28     	; 0xcbe <initTimer3+0x22>
		TCCR3A = 0;
 ca2:	10 92 90 00 	sts	0x0090, r1
		TIMSK3 = 1;
 ca6:	21 e0       	ldi	r18, 0x01	; 1
 ca8:	20 93 71 00 	sts	0x0071, r18
		TCNT3 = 65535 - 5984;
 cac:	8f e9       	ldi	r24, 0x9F	; 159
 cae:	98 ee       	ldi	r25, 0xE8	; 232
 cb0:	90 93 95 00 	sts	0x0095, r25
 cb4:	80 93 94 00 	sts	0x0094, r24
		TCCR3B = 1;
 cb8:	20 93 91 00 	sts	0x0091, r18
 cbc:	08 95       	ret
	}	
	else if(ms == 10){
 cbe:	8a 30       	cpi	r24, 0x0A	; 10
 cc0:	91 05       	cpc	r25, r1
 cc2:	49 f4       	brne	.+18     	; 0xcd6 <initTimer3+0x3a>
		TCCR3B = 2;
 cc4:	82 e0       	ldi	r24, 0x02	; 2
 cc6:	80 93 91 00 	sts	0x0091, r24
		TCNT3 = 65536 - 20000;
 cca:	80 ee       	ldi	r24, 0xE0	; 224
 ccc:	91 eb       	ldi	r25, 0xB1	; 177
 cce:	90 93 95 00 	sts	0x0095, r25
 cd2:	80 93 94 00 	sts	0x0094, r24
 cd6:	08 95       	ret

00000cd8 <stopTimer3>:
	}
}
void stopTimer3(){
	TCCR3A = 0;
 cd8:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;
 cdc:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0;
 ce0:	10 92 71 00 	sts	0x0071, r1
}
 ce4:	08 95       	ret

00000ce6 <setCounterTimer>:
void setCounterTimer(int c){
	counterTimer = c;
 ce6:	90 93 96 02 	sts	0x0296, r25
 cea:	80 93 95 02 	sts	0x0295, r24
}
 cee:	08 95       	ret

00000cf0 <getCounterTimer>:
int getCounterTimer(){
	return counterTimer;
 cf0:	80 91 95 02 	lds	r24, 0x0295
 cf4:	90 91 96 02 	lds	r25, 0x0296
}
 cf8:	08 95       	ret

00000cfa <__udivmodsi4>:
 cfa:	a1 e2       	ldi	r26, 0x21	; 33
 cfc:	1a 2e       	mov	r1, r26
 cfe:	aa 1b       	sub	r26, r26
 d00:	bb 1b       	sub	r27, r27
 d02:	fd 01       	movw	r30, r26
 d04:	0d c0       	rjmp	.+26     	; 0xd20 <__udivmodsi4_ep>

00000d06 <__udivmodsi4_loop>:
 d06:	aa 1f       	adc	r26, r26
 d08:	bb 1f       	adc	r27, r27
 d0a:	ee 1f       	adc	r30, r30
 d0c:	ff 1f       	adc	r31, r31
 d0e:	a2 17       	cp	r26, r18
 d10:	b3 07       	cpc	r27, r19
 d12:	e4 07       	cpc	r30, r20
 d14:	f5 07       	cpc	r31, r21
 d16:	20 f0       	brcs	.+8      	; 0xd20 <__udivmodsi4_ep>
 d18:	a2 1b       	sub	r26, r18
 d1a:	b3 0b       	sbc	r27, r19
 d1c:	e4 0b       	sbc	r30, r20
 d1e:	f5 0b       	sbc	r31, r21

00000d20 <__udivmodsi4_ep>:
 d20:	66 1f       	adc	r22, r22
 d22:	77 1f       	adc	r23, r23
 d24:	88 1f       	adc	r24, r24
 d26:	99 1f       	adc	r25, r25
 d28:	1a 94       	dec	r1
 d2a:	69 f7       	brne	.-38     	; 0xd06 <__udivmodsi4_loop>
 d2c:	60 95       	com	r22
 d2e:	70 95       	com	r23
 d30:	80 95       	com	r24
 d32:	90 95       	com	r25
 d34:	9b 01       	movw	r18, r22
 d36:	ac 01       	movw	r20, r24
 d38:	bd 01       	movw	r22, r26
 d3a:	cf 01       	movw	r24, r30
 d3c:	08 95       	ret

00000d3e <itoa>:
 d3e:	fb 01       	movw	r30, r22
 d40:	9f 01       	movw	r18, r30
 d42:	e8 94       	clt
 d44:	42 30       	cpi	r20, 0x02	; 2
 d46:	c4 f0       	brlt	.+48     	; 0xd78 <itoa+0x3a>
 d48:	45 32       	cpi	r20, 0x25	; 37
 d4a:	b4 f4       	brge	.+44     	; 0xd78 <itoa+0x3a>
 d4c:	4a 30       	cpi	r20, 0x0A	; 10
 d4e:	29 f4       	brne	.+10     	; 0xd5a <itoa+0x1c>
 d50:	97 fb       	bst	r25, 7
 d52:	1e f4       	brtc	.+6      	; 0xd5a <itoa+0x1c>
 d54:	90 95       	com	r25
 d56:	81 95       	neg	r24
 d58:	9f 4f       	sbci	r25, 0xFF	; 255
 d5a:	64 2f       	mov	r22, r20
 d5c:	77 27       	eor	r23, r23
 d5e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 d62:	80 5d       	subi	r24, 0xD0	; 208
 d64:	8a 33       	cpi	r24, 0x3A	; 58
 d66:	0c f0       	brlt	.+2      	; 0xd6a <itoa+0x2c>
 d68:	89 5d       	subi	r24, 0xD9	; 217
 d6a:	81 93       	st	Z+, r24
 d6c:	cb 01       	movw	r24, r22
 d6e:	00 97       	sbiw	r24, 0x00	; 0
 d70:	a1 f7       	brne	.-24     	; 0xd5a <itoa+0x1c>
 d72:	16 f4       	brtc	.+4      	; 0xd78 <itoa+0x3a>
 d74:	5d e2       	ldi	r21, 0x2D	; 45
 d76:	51 93       	st	Z+, r21
 d78:	10 82       	st	Z, r1
 d7a:	c9 01       	movw	r24, r18
 d7c:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <strrev>

00000d80 <strrev>:
 d80:	dc 01       	movw	r26, r24
 d82:	fc 01       	movw	r30, r24
 d84:	67 2f       	mov	r22, r23
 d86:	71 91       	ld	r23, Z+
 d88:	77 23       	and	r23, r23
 d8a:	e1 f7       	brne	.-8      	; 0xd84 <strrev+0x4>
 d8c:	32 97       	sbiw	r30, 0x02	; 2
 d8e:	04 c0       	rjmp	.+8      	; 0xd98 <strrev+0x18>
 d90:	7c 91       	ld	r23, X
 d92:	6d 93       	st	X+, r22
 d94:	70 83       	st	Z, r23
 d96:	62 91       	ld	r22, -Z
 d98:	ae 17       	cp	r26, r30
 d9a:	bf 07       	cpc	r27, r31
 d9c:	c8 f3       	brcs	.-14     	; 0xd90 <strrev+0x10>
 d9e:	08 95       	ret

00000da0 <__udivmodhi4>:
 da0:	aa 1b       	sub	r26, r26
 da2:	bb 1b       	sub	r27, r27
 da4:	51 e1       	ldi	r21, 0x11	; 17
 da6:	07 c0       	rjmp	.+14     	; 0xdb6 <__udivmodhi4_ep>

00000da8 <__udivmodhi4_loop>:
 da8:	aa 1f       	adc	r26, r26
 daa:	bb 1f       	adc	r27, r27
 dac:	a6 17       	cp	r26, r22
 dae:	b7 07       	cpc	r27, r23
 db0:	10 f0       	brcs	.+4      	; 0xdb6 <__udivmodhi4_ep>
 db2:	a6 1b       	sub	r26, r22
 db4:	b7 0b       	sbc	r27, r23

00000db6 <__udivmodhi4_ep>:
 db6:	88 1f       	adc	r24, r24
 db8:	99 1f       	adc	r25, r25
 dba:	5a 95       	dec	r21
 dbc:	a9 f7       	brne	.-22     	; 0xda8 <__udivmodhi4_loop>
 dbe:	80 95       	com	r24
 dc0:	90 95       	com	r25
 dc2:	bc 01       	movw	r22, r24
 dc4:	cd 01       	movw	r24, r26
 dc6:	08 95       	ret

00000dc8 <_exit>:
 dc8:	f8 94       	cli

00000dca <__stop_program>:
 dca:	ff cf       	rjmp	.-2      	; 0xdca <__stop_program>
